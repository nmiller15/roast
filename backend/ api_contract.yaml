openapi: 3.0.3
info:
  title: Roast - Know Your Home Roasts
  description: |-
    This is the API for for the new home coffee roasting app, Roast. An example of the front end is available at the link below! This page will be updated with more information as the application goes live.
    
    Some useful links:
    - [Roast: Frontend Deployment](https://knowyourhomeroast.netlify.app)
    - [The Github Repository](https://github.com/nmiller15/roast)
  contact:
    email: mail@nolanmiller.me
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: None yet
tags:
  - name: user
    description: Operations for your user
  - name: roast
    description: Access to roasts
paths:
  /user:
    post:
      tags:
        - user
      summary: Create a new user
      description: Add a new user to the database
      operationId: createUser
      requestBody:
        description: Add a new user to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid user schema
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user profile by username
      description: Must be logged in as the user to recieve the user.
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: Username of the user info to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Pet not found
      security:
        - bearerAuth:
          - write:user
          - read:user
    
  /user/login:
    post:
      tags:
        - user
      summary: Logs an existing user into the system
      description: ''
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username: 
                  type: string
                  example: theUser
                password:
                  type: string
                  example: '12345'
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
            Auth-Token:
              description: Validation token that provides Bearer Authorization
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
          
components:
  schemas:
    Roast:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 198772
        dateRoasted:
          type: string
          format: date-time
          example: 2024-07-22
        rating:
          type: integer
          format: int64
          example: 3
        origin: 
          type: string
          example: Ethiopian
        variety:
          type: string
          example: Yirgacheffe
        name: 
          type: string
          example: Number One
        startingWeightG:
          type: integer
          format: int64
          example: 228
        engingWeightG:
          type: integer
          format: int64
          example: 191
        heatLevel:
          type: string
          description: Heat of the stove
          example: Med
          enum:
            - Lo
            - MedLo
            - Med
            - MedHi
            - Hi
        startTempF:
          type: integer
          format: int64
          example: 400
        lowestTempF:
          type: integer
          format: int64
          example: 325
        firstCrackSeconds:
          type: integer
          format: int64
          example: 140
        tempRiseSeconds:
          type: integer
          format: int64
          example: 180
        openedLidSeconds:
          type: integer
          format: int64
          example: 210
        heatOffSeconds:
          type: integer
          format: int64
          example: 235
        dumpedSeconds:
          type: integer
          format: int64
          example: 255
        isFavorite:
          type: boolean
          example: false
        notes:
          type: string
          example: Doesn't taste as good as last time... I wonder if the weather is making the beans roast faster now that it's warmer
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        permission:
          type: string
          example: admin
          enum:
            - user
            - admin
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid.
    NotFound:
      description: A resource with that identifier was not found.
